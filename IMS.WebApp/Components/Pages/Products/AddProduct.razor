
@page "/addproduct"

@rendermode InteractiveServer

@inject IAddProductUseCase AddProductUseCase

@inject NavigationManager NavigationManager

<h3>Add Product</h3>
<br />

<EditForm Model="product"  OnValidSubmit="Save">
	<DataAnnotationsValidator/>
	<ValidationSummary />

	<div class="form-group">
		<label for="name">Product Name</label>
		<InputText 
		id="name"
		@bind-value="product.ProductName"
		class="form-control" />
		<ValidationMessage For="() => product.ProductName" />
	</div>

	<div class="form-group">
		<label for="quantity">Product Quantity</label>
		<InputNumber id="quantity"
		@bind-value="product.Quantity"
		class="form-control" />
		<ValidationMessage For="() => product.Quantity" />
	</div>

	<div class="form-group">
		<label for="price">Product Price</label>
		<InputNumber id="price"
		@bind-value="product.Price"
		class="form-control" />
		<ValidationMessage For="() => product.Price" />
	</div>

	<div class="form-group">
		<label for="inventories">Inventories</label>
		<ProductInventory_Component Product="this.product"	/>
	</div>

	<br />
	<button type="submit" class="btn btn-primary">Save</button>
	&nbsp;
	<a href="/inventories" class="btn btn-dark">Cancel</a>

</EditForm>

@code {

	private Product product { get; set; } = new Product();


	private async Task Save()
	{
		try
		{
			await AddProductUseCase.ExecuteAsync(product);
			NavigationManager.NavigateTo("/products");
		}
		catch (Exception)
		{
			
			throw;
		}
	
	}
}

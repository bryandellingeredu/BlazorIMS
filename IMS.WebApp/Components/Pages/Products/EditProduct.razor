@page "/editproduct/{id:int}"

@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject IEditProductUseCase EditProductUseCase
@inject NavigationManager NavigationManager

@rendermode InteractiveServer


<h3>Edit Product</h3>

<br/>

@if (this.product is not null){

	<EditForm Model="product" OnValidSubmit="Update">
		<DataAnnotationsValidator />
		<ValidationSummary />

		<div class="form-group">
			<label for="name">Product Name</label>
			<InputText id="name"
			@bind-value="product.ProductName"
			class="form-control" />
			<ValidationMessage For="() => product.ProductName" />
		</div>

		<div class="form-group">
			<label for="quantity">Product Quantity</label>
			<InputNumber id="quantity"
			@bind-value="product.Quantity"
			class="form-control" />
			<ValidationMessage For="() => product.Quantity" />
		</div>

		<div class="form-group">
			<label for="price">Product Price</label>
			<InputNumber id="price"
			@bind-value="product.Price"
			class="form-control" />
			<ValidationMessage For="() => product.Price" />
		</div>

		<div class="form-group">
			<label for="inventories">Inventories</label>
			<ProductInventory_Component Product="this.product" />
		</div>

		<br />
		<button type="submit" class="btn btn-primary">Save</button>
		&nbsp;
		<a href="/inventories" class="btn btn-dark">Cancel</a>

	</EditForm>
}

@code {

	private Product? product;

	[Parameter]
	public int Id { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		product = await ViewProductByIdUseCase.ExecuteAsync(this.Id);
	}
	private async Task Update()
	{
		if (product is not null)
		{
			await EditProductUseCase.ExecuteAsync(this.product);
			NavigationManager.NavigateTo("/products");
		}
	}
}

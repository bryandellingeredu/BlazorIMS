@using static IMS.WebApp.Components.Controls.Common.AutoCompleteComponent
@rendermode InteractiveServer

@inject IViewProductsByNameUseCase ViewProductsByNameUseCase
@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject ISellProductUseCase SellProductUseCase


@inject IJSRuntime JSRuntime

@page "/sell"

<h3>Sell Product</h3>

<EditForm Model="sellViewModel" OnValidSubmit="Sell" id="sell-form">
	<DataAnnotationsValidator />
	<ValidationSummary />

	<div class="form-group">
		<label for="so">Sales Order #</label>
		<InputText id="so"
		@bind-Value="sellViewModel.SalesOrderNumber"
		class="form-control" />
	</div>
	<br />

	<div class="card">
		<div class="card-body">
			<div class="form-group">
				<AutoCompleteComponent Label="Product to Sell"
				SearchFunction="SearchProduct"
				OnItemSelected="HandleItemSelected" />


			</div>
		</div>
	</div>
	<br />
	<div class="form-group">
		<label for="qty">Quantity</label>
		<InputNumber id="qty"
		@bind-Value="sellViewModel.QuantityToSell"
		class="form-control" />
	</div>
	<br />
	<div class="form-group">
		<label for="uprice">Unit Price</label>
		<InputNumber id="uprice"
		@bind-Value="sellViewModel.UnitPrice"
		class="form-control" />
	</div>
	<button type="submit" class="btn btn-primary">Sell</button>
</EditForm>

@code {
	private SellViewModel sellViewModel = new SellViewModel();

	private Product? selectedProduct = null;

	private async Task<List<ItemViewModel>?> SearchProduct(string name)
	{
		var list = await ViewProductsByNameUseCase.ExecuteAsync(name);
		if (list is null) return null;

		return list.Select(x => new ItemViewModel { Id = x.ProductId, Name = x.ProductName })?.ToList();
	}



	private async Task HandleItemSelected(ItemViewModel item)
	{
		selectedProduct = await ViewProductByIdUseCase.ExecuteAsync(item.Id);
		this.sellViewModel.ProductId = item.Id;
		this.sellViewModel.Product = this.selectedProduct;
		this.sellViewModel.UnitPrice = this.selectedProduct.Price;	
	}

	private async Task Sell()
	{
		await SellProductUseCase.ExecuteAsync(this.sellViewModel.SalesOrderNumber, this.selectedProduct, this.sellViewModel.QuantityToSell, this.sellViewModel.UnitPrice, "Frank");
		sellViewModel = new SellViewModel();
		selectedProduct = null;
	}

	protected override void OnAfterRender(bool firstRender)
	{
		if (firstRender)
		{
			JSRuntime.InvokeVoidAsync("setFocus", "pn");
			JSRuntime.InvokeVoidAsync("preventFormSubmission", "sell-form");
		}
		base.OnAfterRender(firstRender);
	}
}
